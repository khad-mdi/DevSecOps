version: 2.1


# Default configuration for persist_to_workspace and attach_workspace commands
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    # Must be absolute path or relative path from working_directory
    at: ~/project

# This main executor is used by all jobs unless otherwise specified
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/php:8.2
  aws-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - name: localhost
        image: cimg/aws:2023.12.1
  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2-node
        name: localhost
  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/base:stable
        name: localhost



jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Home directory: $HOME"
            echo "Current shell: $SHELL"
            echo "Operating system: $(uname -a)"
            echo "Current path: $PATH"
            echo "Current working directory: $(pwd)"
            echo "Current date: $(date)"
            echo "--------------------"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace


  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer and PHPCompatibility
          command: composer require --dev "squizlabs/php_codesniffer=*" "phpcompatibility/php-compatibility=*"
      - run:
          name: Run PHP_CodeSniffer with Custom Ruleset in the project root
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.txt --report=checkstyle --extensions=php --ignore=vendor/ .
            result=$?
            if [ $result -eq 1 ] || [ $result -eq 2 ]; then
              exit 0
            else
              exit $result
            fi
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report

  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run local-php-security-checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present, otherwise skip the job
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              echo "export SKIP_PHPUNIT=true" >> $BASH_ENV
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit

  ###############################################
  # DOCKER JOBS
  ###############################################

  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.23
          docker_layer_caching: true
      - run:
          name: Set ENVIRONMENT variable based on branch
          command: |
            if [[ "$CIRCLE_BRANCH" == "main" ]]; then
              echo 'export ENV="prod"' >> "$BASH_ENV"
            else
              echo 'export ENV="dev"' >> "$BASH_ENV"
            fi
      - run:
          name: Install Infisical CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y curl
            sudo curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo bash
            sudo apt-get update
            sudo apt-get install -y infisical
      - run:
          name: Store secrets
          command: infisical export --token=$INFISICAL_TOKEN -e=$ENV --format=dotenv-export > .env
      - run:
          name: Load secrets
          command: |
            echo 'source .env' >> "$BASH_ENV"
      - run:
          name: Build Docker Image
          command: |
            if [ ! -z "$SKIP_BUILD" ]; then
              echo "Skipping build"
              circleci step halt
              exit 0
            fi

            # Sanitize the repository name and branch name
            REPOSITORY=$(echo "ghcr.io/$GHCR_USERNAME/$CIRCLE_PROJECT_REPONAME" | tr '[:upper:]' '[:lower:]' | tr -d '_')
            TAG=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]' | tr '/' '-' | tr -cd '[:alnum:]._-' | cut -c 1-128)

            # Login to GHCR
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

            # Build the Docker image
            docker build \
            -f Docker/Dockerfile \
            -t $REPOSITORY:$TAG \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg TAG="${TAG}" \
            --build-arg GIT_COMMIT=$(git rev-parse -q --verify HEAD) \
            --build-arg GIT_URL=$(echo ${CIRCLE_REPOSITORY_URL} | sed -e 's/^git@/https:\/\//g' -e 's/\.git$//g' -e 's/:/\//g') \
            --build-arg SQLITE_VERSION=3430200 \
            --build-arg SQLITE_YEAR=2023 \
            --build-arg PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME \
            .
      - run:
          name: Scan Docker Image with Trivy
          command: |
            # Installer Trivy
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh
            # Scanner l'image
            ./bin/trivy image --exit-code 1 --no-progress my-image-to-scan:latest
      - run:
          name: Push Doker Image to GHCR (GitHub Container Registry)
          command : |
            # Push the Docker image
            docker push $REPOSITORY:$TAG

  ###############################################
  # CODE EVALUATION JOBS
  ###############################################

  evaluate-phpmetrics:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHPMetrics
          command: composer require --dev phpmetrics/phpmetrics
      - run:
          name: Run PHPMetrics
          command: ./vendor/bin/phpmetrics --report-html=phpmetrics-report.html ./public ./src
      - store_artifacts:
          path: phpmetrics-report.html
          destination: phpmetrics-report

  evaluate-phpstan:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHPStan
          command: composer require --dev phpstan/phpstan
      - run:
          name: Run PHPStan
          command: ./vendor/bin/phpstan analyse --level=4 src
      - run:
          name: Run PHPStan on public directory
          command: ./vendor/bin/phpstan analyse --level=4 public

#  evaluate-phploc:
#    executor: php-executor
#    steps:
#      - *attach_workspace
#      - run:
#          name: Install PHPLOC
#          command: composer require --dev phploc/phploc
#      - run:
#          name: Run PHPLOC
#          command: ./vendor/bin/phploc --log-xml=phploc-report.xml ./public ./src

  ###############################################
  # CODE QUALITY JOBS
  ###############################################

  check-phpmd:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHPMD
          command: composer require --dev phpmd/phpmd
      - run:
          name: Run PHPMD
          command: ./vendor/bin/phpmd public,src text codesize,unusedcode,naming

  check-php-doc:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install php-doc-check
          command: composer require --dev niels-de-blaauw/php-doc-check
      - run:
          name: Run php-doc-check
          command: ./vendor/bin/php-doc-check public src

  ###############################################
  # DEPLOY JOBS
  ###############################################

  deploy-ssh-dev:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${DEV_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to AWS
          command: |
            set -x
            ssh -v -o StrictHostKeyChecking=no $DEV_SSH_USER@$DEV_SSH_HOST \<< EOF
            PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
            cd $DEV_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer update
            composer install --optimize-autoloader --no-interaction --prefer-dist
            echo "APP_SECRET=\"\$(infisical export --token=$INFISICAL_TOKEN -e=dev --format=json | jq -r '.[] | select(.key == "APP_SECRET") | .value')\"" > .env
            sudo rm -rf /var/www/html/*
            sudo cp -R . /var/www/html/
            (flock -w 10 9 || exit 1; sudo -S service php${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF

  deploy-ssh-prod:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${PROD_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to AWS
          command: |
            set -x
            ssh -v -o StrictHostKeyChecking=no $PROD_SSH_USER@$PROD_SSH_HOST \<< EOF
            PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
            cd $PROD_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer update
            composer install --optimize-autoloader --no-interaction --prefer-dist
            echo "APP_SECRET=\"\$(infisical export --token=$INFISICAL_TOKEN -e=dev --format=json | jq -r '.[] | select(.key == "APP_SECRET") | .value')\"" > .env
            sudo rm -rf /var/www/html/*
            sudo cp -R . /var/www/html/
            (flock -w 10 9 || exit 1; sudo -S service php${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF

  ###############################################
  # WORKFLOWS
  ###############################################

workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - lint-phpcs:
          requires:
            - build-setup
      - security-check-dependencies:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup
      - hold:
          type: approval
          filters:
            branches:
              only:
                - main
                - /^release\/.*/
      - evaluate-phpmetrics:
          requires:
            - build-setup
      - evaluate-phpstan:
          requires:
            - build-setup
      - check-phpmd:
          requires:
            - build-setup
      - check-php-doc:
          requires:
            - build-setup
      - deploy-ssh-dev:
          #requires:
          #  - hold
          filters:
            branches:
              only:
                - develop
                - main
                - /^release\/.*/
      - deploy-ssh-prod:
          requires:
            - hold
            - deploy-ssh-dev
          filters:
            branches:
              only:
                - main


  container_workflow:
    jobs:
      - build-docker-image:
          filters:
            branches:
              only:
                - master
                - main
                - develop
                - /^feature\/.*/
                - /^release\/.*/
                - /^hotfix\/.*/
                - /^bugfix\/.*/